/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.RepoFactory;
import hr.algebra.dal.Repository;
import hr.algebra.dal.sql.MovieRepo;
import hr.algebra.model.Movie;
import hr.algebra.model.MoviePerson;
import hr.algebra.model.MoviePersonTableModel;
import hr.algebra.model.Person;
import hr.algebra.model.PersonType;
import hr.algebra.utils.MessageUtils;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;

/**
 *
 * @author lukak
 */
public class EditPersonsPanel extends javax.swing.JPanel {

    private List<JTextComponent> validationFields;
    private List<JLabel> errorlabels;
    
    private Repository moviePersonRepo;
    private Repository movieRepo;
    private Repository personRepo;
    
    private MoviePersonTableModel moviePersonTableModel;
    
    private MoviePerson selectedMoviePerson;

    private List<Movie> movies;
    
    /**
     * Creates new form EditPersonsPanel
     */
    public EditPersonsPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbPersons = new javax.swing.JScrollPane();
        tbPersonMovies = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tfSurname = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cbMovies = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cbPersonType = new javax.swing.JComboBox<>();
        btnUpdate = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lbSurnameError = new javax.swing.JLabel();
        lbNameError = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1192, 776));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tbPersonMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbPersonMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbPersonMoviesMouseClicked(evt);
            }
        });
        tbPersonMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbPersonMoviesKeyReleased(evt);
            }
        });
        tbPersons.setViewportView(tbPersonMovies);

        jLabel1.setText("Name");

        jLabel2.setText("Movie");

        jLabel3.setText("Surname");

        jLabel4.setText("PersonType");

        btnUpdate.setForeground(new java.awt.Color(0, 153, 0));
        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnAdd.setForeground(java.awt.Color.blue);
        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setForeground(java.awt.Color.red);
        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lbSurnameError.setForeground(java.awt.Color.red);

        lbNameError.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbPersons, javax.swing.GroupLayout.PREFERRED_SIZE, 1063, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(47, 47, 47)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbSurnameError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lbNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbPersonType, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbPersonType, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbSurnameError, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(tbPersons, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (formValid()) {
            try {
                Person person = new Person(
                    tfName.getText().trim(),
                    tfSurname.getText().trim()
            );
                String title = (String) cbMovies.getSelectedItem();
                Optional<Movie> movie = MovieRepo.selectMovieByTitle(title);
                PersonType personType = (PersonType) cbPersonType.getSelectedItem();
                
                int idPerson = personRepo.create(person);
                
                MoviePerson moviePerson = new MoviePerson(
                          movie.get().getId(), idPerson, personType.getType(), personType, movie.get(), person
                );

                moviePersonRepo.create(moviePerson);
                moviePersonTableModel.setMoviePerson(moviePersonRepo.select());
                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void tbPersonMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbPersonMoviesMouseClicked
        showPerson();
    }//GEN-LAST:event_tbPersonMoviesMouseClicked

    private void tbPersonMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbPersonMoviesKeyReleased
        showPerson();
    }//GEN-LAST:event_tbPersonMoviesKeyReleased

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if(selectedMoviePerson == null) {
            MessageUtils.showInformationMessage("Wrong", "Select person!");
            return;
        }
         if(formValid()) {
            try {
                
                Person oldPerson = selectedMoviePerson.getPerson();
               
                Person person = new Person(oldPerson.getId(), tfName.getText().trim(), tfSurname.getText().trim());                      
                  
                personRepo.update(oldPerson.getId(), person); 
                
                String title = (String) cbMovies.getSelectedItem();
                Optional<Movie> movie = MovieRepo.selectMovieByTitle(title);
                PersonType personType = (PersonType) cbPersonType.getSelectedItem();
                
                MoviePerson newMoviePerson = new MoviePerson(selectedMoviePerson.getId(), movie.get().getId(), person.getId(), personType);
                
                moviePersonRepo.update(selectedMoviePerson.getId(), newMoviePerson);

                moviePersonTableModel.setMoviePerson(moviePersonRepo.select());
                
                clearForm();
                
                
            } catch (Exception ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("error", "Unable to update person!");
            }
         }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
           if(selectedMoviePerson == null) {
            MessageUtils.showInformationMessage("Wrong", "Select person!");
            return;
         }
         Person person = selectedMoviePerson.getPerson(); 
          if(MessageUtils.showConfirmDialog("Delete", "Are you sure?") == JOptionPane.YES_OPTION) {
            try {
                personRepo.delete(person.getId());
                clearForm();
                moviePersonTableModel.setMoviePerson(moviePersonRepo.select());
            } catch (Exception ex) {
                Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Can't delete person!");
            }
          }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbMovies;
    private javax.swing.JComboBox<PersonType> cbPersonType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lbNameError;
    private javax.swing.JLabel lbSurnameError;
    private javax.swing.JTable tbPersonMovies;
    private javax.swing.JScrollPane tbPersons;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfSurname;
    // End of variables declaration//GEN-END:variables

    private void init() {
         try {
            initValidation();
            initRepository();
            initComboBox();
            initTable();
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to load form");
            System.exit(1);
        }
    }

    private void initValidation() {
       validationFields = Arrays.asList(tfName, tfSurname);
        errorlabels = Arrays.asList(lbNameError,lbSurnameError);
    }

    private void initRepository() throws Exception {
        moviePersonRepo=RepoFactory.getMoviePersonRepo();
        movieRepo=RepoFactory.getMovieRepo();
        personRepo=RepoFactory.getPersonRepo();
                
    }

    private void initTable() {
        tbPersonMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); 
        tbPersonMovies.setAutoCreateRowSorter(true); 
        tbPersonMovies.setRowHeight(25);
            try {
           moviePersonTableModel = new MoviePersonTableModel(moviePersonRepo.select());
           tbPersonMovies.setModel(moviePersonTableModel);
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
     private boolean formValid() {
        boolean ok = true;
        
        for(int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorlabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");
        }
        
        return ok;
    }

    private void initComboBox() {
        try {
            movies = movieRepo.select();
            movies.forEach((m) -> {
                cbMovies.addItem(m.getTitle());
            });
            
            cbPersonType.setModel(new DefaultComboBoxModel<>(PersonType.values()));
        } catch (Exception ex) {
            Logger.getLogger(EditPersonsPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void showPerson() {
        int selectedRow = tbPersonMovies.getSelectedRow();
        int rowIndex = tbPersonMovies.convertRowIndexToModel(selectedRow); 
        int id = (int)moviePersonTableModel.getValueAt(rowIndex, 0); 
        
        try {
            Optional<MoviePerson> optPersonMovie = moviePersonRepo.select(id); //*********
            if(optPersonMovie.isPresent()){
                selectedMoviePerson = optPersonMovie.get();
                FillForm(selectedMoviePerson);
            }
        } catch (Exception ex) {
            Logger.getLogger(EditMoviesPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void FillForm(MoviePerson selectedMoviePerson) {
        tfName.setText(selectedMoviePerson.getPerson().getName());
        tfSurname.setText(selectedMoviePerson.getPerson().getSurname());
        cbMovies.setSelectedItem(selectedMoviePerson.getMovie().getTitle());
        cbPersonType.setSelectedItem(selectedMoviePerson.getType());
    }

    private void clearForm() {
        tfName.setText("");
        tfSurname.setText("");
        lbNameError.setText("");
        lbSurnameError.setText("");
    }
}
